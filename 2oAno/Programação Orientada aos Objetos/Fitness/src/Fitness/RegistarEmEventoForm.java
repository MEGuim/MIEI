
package Fitness;

import java.util.ArrayList;
import java.util.Calendar;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 * Classe para a criação de janelas
 *
 * @author Bruno Pereira
 * @author João Mano
 * @author Miguel Guimarães
 * @version 2014
 */
public class RegistarEmEventoForm extends javax.swing.JFrame {

	/**
	 * Creates new form RegistarEmEvento
     * @param parent
     * @param fit
     * @param u
     * @param mode
	 */
	public RegistarEmEventoForm(JFrame parent, FitnessUM fit, User u, String mode) {
		initComponents();
		this.setLocationRelativeTo(parent);
		this.parent = parent;
		this.fit = fit;
		this.u = u;
		this.mode = mode;
		if (mode.equals("simular")) {
			this.butAddEvento.setText("SIMULAR");
			this.setTitle("Simular evento");
			this.preencheSimulaEvents();
		} else {
			this.preencheOpenEvents();
			this.setTitle("Inscrição em evento");
		}
	}

	/**
	 * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of this method is always regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel14 = new javax.swing.JPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        tableEvents = new javax.swing.JTable();
        butAddEvento = new javax.swing.JButton();
        butCancel = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosed(java.awt.event.WindowEvent evt) {
                formWindowClosed(evt);
            }
        });

        jPanel14.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "EVENTOS DISPONÍVEIS"));

        tableEvents.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N
        tableEvents.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Nome", "Tipo", "Local", "Data", "Limite de Inscrições"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tableEvents.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        tableEvents.getTableHeader().setReorderingAllowed(false);
        jScrollPane4.setViewportView(tableEvents);

        butAddEvento.setIcon(new javax.swing.ImageIcon("/home/jmano/Transferências/Icons/ok.png")); // NOI18N
        butAddEvento.setText("EVENTO");
        butAddEvento.setToolTipText("Inscrever-se no evento seleccionado");
        butAddEvento.setIconTextGap(10);
        butAddEvento.setMargin(new java.awt.Insets(2, 9, 2, 9));
        butAddEvento.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butAddEventoActionPerformed(evt);
            }
        });

        butCancel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Fitness/close.png"))); // NOI18N
        butCancel.setText("CANCEL");
        butCancel.setToolTipText("Fechar janela");
        butCancel.setIconTextGap(10);
        butCancel.setMargin(new java.awt.Insets(2, 9, 2, 9));
        butCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butCancelActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel14Layout = new javax.swing.GroupLayout(jPanel14);
        jPanel14.setLayout(jPanel14Layout);
        jPanel14Layout.setHorizontalGroup(
            jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel14Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel14Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(butCancel)
                        .addGap(18, 18, 18)
                        .addComponent(butAddEvento))
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 561, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel14Layout.setVerticalGroup(
            jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel14Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 246, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(butCancel)
                    .addComponent(butAddEvento))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel14, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel14, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void butCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butCancelActionPerformed
		this.dispose();
		this.parent.setVisible(true);
		if (this.parent instanceof UserForm) {
			UserForm user = (UserForm) this.parent;
			user.preencheEventos();
		} else {
			AdminForm adm = (AdminForm) this.parent;
			adm.setStats();
		}
    }//GEN-LAST:event_butCancelActionPerformed

    private void butAddEventoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butAddEventoActionPerformed
		if (this.tableEvents.getSelectedRowCount() > 0) {
			if (!this.mode.equals("simular")) {
				ArrayList<Event> eventos = new ArrayList<>();
				for (Event e : this.fit.getOpenEvents()) {
					if (!e.getParticipantsList().contains(this.u)) {
						eventos.add(e);
					}
				}
				Event sel = eventos.get(this.tableEvents.getSelectedRow());
				if (this.fit.userRegistEvent(this.u, sel)) {
					JOptionPane.showMessageDialog(this, "Inscreveu-se com sucesso no evento!");
				} else {
					JOptionPane.showMessageDialog(this, "Precisa de ter praticado este desporto pelo menos uma vez para se poder inscrever num evento...");
				}
				this.preencheOpenEvents();
			} else {
				ArrayList<Event> eventos = new ArrayList<>();
				for (Event e : this.fit.getSimulaEvents()) {
					eventos.add(e);
				}

				Event sel = eventos.get(this.tableEvents.getSelectedRow());
				if (sel.getParticipants() > 0) {
					if (eventos.size() > 1) {
						SimulaEventForm sim = new SimulaEventForm(this, sel, this.fit);
						sim.setVisible(true);
						this.setVisible(false);
					} else {
						SimulaEventForm sim = new SimulaEventForm(this.parent, sel, this.fit);
						sim.setVisible(true);
						this.setVisible(false);
					}
				} else {
					sel.addSimulacao(new Simulacao());
					JOptionPane.showMessageDialog(this, "Não existem utilizadores registados neste evento...");
				}
				this.preencheOpenEvents();
			}
		}
    }//GEN-LAST:event_butAddEventoActionPerformed

    private void formWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosed
		if (this.parent instanceof UserForm) {
			UserForm user = (UserForm) this.parent;
			user.preencheEventos();
		} else {
			AdminForm adm = (AdminForm) this.parent;
			adm.setStats();
		}
		this.parent.setVisible(true);
    }//GEN-LAST:event_formWindowClosed

	private void preencheOpenEvents() {
		ArrayList<Event> eventos = new ArrayList<>();
		DefaultTableModel dtm = (DefaultTableModel) this.tableEvents.getModel();
		dtm.setNumRows(0);

		for (Event e : this.fit.getOpenEvents()) {
			if (!e.getParticipantsList().contains(this.u)) {
				eventos.add(e);
			}
		}

		for (Event e : eventos) {
			int diaI = e.getDate().get(Calendar.DAY_OF_MONTH);
			int mesI = e.getDate().get(Calendar.MONTH);
			int anoI = e.getDate().get(Calendar.YEAR);
			int diaE = e.getDate().get(Calendar.DAY_OF_MONTH);
			int mesE = e.getDate().get(Calendar.MONTH);
			int anoE = e.getDate().get(Calendar.YEAR);
			dtm.addRow(new Object[]{e.getName(), e.getTipoActivity(), e.getLocation(), String.valueOf(diaE) + "/" + String.valueOf(mesE + 1) + "/" + String.valueOf(anoE), String.valueOf(diaI) + "/" + String.valueOf(mesI + 1) + "/" + String.valueOf(anoI)});
		}
		this.tableEvents.setModel(dtm);
	}

    /**
     *
     */
    public void preencheSimulaEvents() {
		DefaultTableModel dtm = (DefaultTableModel) this.tableEvents.getModel();
		dtm.setNumRows(0);
		
		for (Event e : this.fit.getSimulaEvents()) {
			int diaI = e.getDate().get(Calendar.DAY_OF_MONTH);
			int mesI = e.getDate().get(Calendar.MONTH);
			int anoI = e.getDate().get(Calendar.YEAR);
			int diaE = e.getDate().get(Calendar.DAY_OF_MONTH);
			int mesE = e.getDate().get(Calendar.MONTH);
			int anoE = e.getDate().get(Calendar.YEAR);
			dtm.addRow(new Object[]{e.getName(), e.getTipoActivity(), e.getLocation(), String.valueOf(diaE) + "/" + String.valueOf(mesE + 1) + "/" + String.valueOf(anoE), String.valueOf(diaI) + "/" + String.valueOf(mesI + 1) + "/" + String.valueOf(anoI)});
		}
		this.tableEvents.setModel(dtm);
	}

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton butAddEvento;
    private javax.swing.JButton butCancel;
    private javax.swing.JPanel jPanel14;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JTable tableEvents;
    // End of variables declaration//GEN-END:variables

	private FitnessUM fit;
	private User u;
	private JFrame parent;
	private String mode;
}
