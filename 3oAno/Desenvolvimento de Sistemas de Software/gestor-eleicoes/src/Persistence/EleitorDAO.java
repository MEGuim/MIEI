package Persistence;

import Model.Eleitor;

import java.sql.*;
import java.util.*;

public class EleitorDAO implements Map<Integer, Eleitor> {

    private static final String INSERT_ELEITOR = "INSERT INTO Eleitor (password,local_voto) VALUES (?,?)";
    private static final String UPDATE_ELEITOR = "UPDATE Eleitor SET password=?, local_voto=? WHERE id_eleitor=?";

    private static final String SELECT_ELEITOR = "SELECT * FROM Eleitor WHERE id_eleitor = ?";
    private static final String SELECT_ELEITORES = "SELECT id_eleitor,password,local_voto FROM Eleitor";

    private static final String DELETE_ELEITOR =  "DELETE FROM Eleitor WHERE id_eleitor=?";
    private static final String DELETE_ELEITORES = "DELETE FROM Eleitor";

    private static final String COUNT_ELEITORES = "SELECT Count(*) as n FROM Eleitor";
    private static final String SELECT_IDS = "SELECT id_eleitor FROM Eleitor";

    private static final String UPDATE_PASSWORD = "UPDATE Eleitor SET password = ? WHERE id_eleitor = ?";


    private String url;
    private String user;
    private String password;

    public EleitorDAO(String url, String user, String password) {
        this.url = url;
        this.user = user;
        this.password = password;
    }

    @Override
    public int size() {
        try {
            int count;

            Connection connection = DriverManager.getConnection(url,user,password);
            Statement statement = connection.createStatement();

            try (ResultSet resultSet = statement.executeQuery(COUNT_ELEITORES)) {
                if (resultSet.next())
                    count = resultSet.getInt("n");
                else
                    count = -1;
            } finally {
                statement.close();
                connection.close();
            }

            return count;

        } catch (SQLException ex) {
            ex.printStackTrace();
        }
        return -1;
    }

    @Override
    public boolean isEmpty() {
        return size()==0;
    }

    @Override
    public boolean containsKey(Object key) {
         try{

             Connection connection = DriverManager.getConnection(url,user,password);
             PreparedStatement statement = connection.prepareStatement(SELECT_ELEITOR);

             statement.setInt(1,(int)key);
             try(ResultSet result = statement.executeQuery())
             {
                 return result.next();
             }
             finally {
                 statement.close();
                 connection.close();
             }

         }
         catch(SQLException ex){
             ex.printStackTrace();
         }
        return false;
    }

    @Override
    public boolean containsValue(Object value) {
        return containsKey(((Eleitor)value).getNumero());
    }

    @Override
    public Eleitor get(Object key) {
        Eleitor eleitor = null;
        try {

            Connection connection = DriverManager.getConnection(url,user,password);
            PreparedStatement statement = connection.prepareStatement(SELECT_ELEITOR);

            statement.setInt(1,(int) key);

            try (ResultSet result = statement.executeQuery()) {
                if (result.next()) {
                    eleitor = new Eleitor();
                    eleitor.setNumero((int) key);
                    eleitor.setPassword(result.getString("password"));
                    eleitor.setLocalVoto(result.getString("local_voto"));
                }
            } finally {
                statement.close();
                connection.close();
            }

        } catch (SQLException ex) {
            ex.printStackTrace();
        }
        return eleitor;
    }

    @Override
    public Eleitor put(Integer key, Eleitor value) {
        String query;
        int autoGeneratedKeys;
        boolean isUpdate;
        if(key<0){
            isUpdate=false;
            query = INSERT_ELEITOR;
            autoGeneratedKeys = Statement.RETURN_GENERATED_KEYS;
        }
        else{
            isUpdate=true;
            query = UPDATE_ELEITOR;
            autoGeneratedKeys = Statement.NO_GENERATED_KEYS;
        }

        try{
            Connection connection = DriverManager.getConnection(url,user,password);
            PreparedStatement statement = connection.prepareStatement(query,autoGeneratedKeys);

            statement.setString(1,value.getPassword());
            statement.setString(2,value.getLocalVoto());

            if(isUpdate){
                statement.setInt(3,key);

            }

            statement.executeUpdate();

            try {
                if (autoGeneratedKeys == Statement.RETURN_GENERATED_KEYS) {
                    ResultSet keys = statement.getGeneratedKeys();
                    if (keys != null && keys.next()) {
                        value.setNumero(keys.getInt(1));
                    }
                }
            }catch(SQLException e){
                e.printStackTrace();
            } finally {
                statement.close();
                connection.close();
            }

        }
        catch (SQLException ex){
            ex.printStackTrace();
        }
        return value;
    }

    @Override
    public Eleitor remove(Object key) {
        Eleitor eleitor = get(key);
        try{
            Connection connection = DriverManager.getConnection(url,user,password);
            PreparedStatement statement =  connection.prepareStatement(DELETE_ELEITOR);

            statement.setInt(1,(int) key);
            try{
                statement.executeUpdate();
            }finally {
                statement.close();
                connection.close();
            }
        }catch(SQLException e){
            e.printStackTrace();
        }
        return eleitor;
    }

    @Override
    public void putAll(Map<? extends Integer, ? extends Eleitor> m) {
        for(Eleitor eleitor:m.values()){
            put(eleitor.getNumero(),eleitor);
        }
    }

    @Override
    public void clear() {
        try{
            Connection connection = DriverManager.getConnection(url,user,password);

            try(Statement statement = connection.createStatement()){
                statement.executeUpdate(DELETE_ELEITORES);
            }finally
            {
                connection.close();
            }
        }catch (SQLException e){
            e.printStackTrace();
        }


    }

    @Override
    public Set<Integer> keySet() {
        Set<Integer> s = new HashSet<>();

        try {

            Connection connection = DriverManager.getConnection(url,user,password);
            PreparedStatement statement = connection.prepareStatement(SELECT_IDS);

            try (ResultSet result = statement.executeQuery()){
                while(result.next()) {
                    s.add(result.getInt(1));
                }
            }finally {
                connection.close();
                statement.close();
            }
        }

        catch (SQLException e){
            e.printStackTrace();
        }
        return s;
    }

    @Override
    public Collection<Eleitor> values() {
        ArrayList<Eleitor> arrayList = new ArrayList<>();
        try{
            Eleitor eleitor;

            Connection connection = DriverManager.getConnection(url,user,password);
            PreparedStatement statement = connection.prepareStatement(SELECT_ELEITORES);

            try(ResultSet resultSet = statement.executeQuery()){
                while(resultSet.next()){
                    eleitor = new Eleitor();
                    eleitor.setNumero(resultSet.getInt("id_eleitor"));
                    eleitor.setPassword(resultSet.getString("password"));
                    eleitor.setLocalVoto(resultSet.getString("local_voto"));

                    arrayList.add(eleitor);
                }
            }finally {
                connection.close();
                statement.close();
            }

        }
        catch (SQLException e){
            e.printStackTrace();
        }
        return arrayList;
    }

    @Override
    public Set<Entry<Integer, Eleitor>> entrySet() {
        return null;
    }

}