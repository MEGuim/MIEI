package Persistence;

import Model.Lista;

import java.sql.*;
import java.util.*;

public class ListaDAO implements Map<Integer, Lista> {

    public static final String INSERT_LISTA = "INSERT INTO Lista (nome_lista,resultado) VALUES (?,?)";
    public static final String UPDATE_LISTA = "UPDATE Lista SET nome_lista = ?,resultado = ? WHERE id_lista = ?";

    public static final String SELECT_LISTA = "SELECT nome_lista, resultado FROM Lista WHERE id_lista = ?";
    public static final String SELECT_LISTAS = "SELECT id_lista, nome_lista, resultado FROM Lista" ;


    public static final String DELETE_LISTA = "DELETE FROM Lista WHERE id_lista = ?";
    public static final String DELETE_LISTAS = "DELETE FROM Lista";

    public static final String COUNT_LISTAS = "SELECT COUNT(*) as n FROM Lista";
    public static final String SELECT_IDS = "SELECT id_lista FROM Lista";

    public static final String SELECT_BY_NOME = "SELECT * FROM Lista WHERE nome_lista = ?";

    private String url;
    private String user;
    private String password;

    public ListaDAO(String url, String user, String password) {
        this.url = url;
        this.user = user;
        this.password = password;
    }

    @Override
    public int size() {
        try {
            int count;

            Connection connection = DriverManager.getConnection(url,user,password);
            Statement statement = connection.createStatement();

            try (ResultSet resultSet = statement.executeQuery(COUNT_LISTAS)) {
                if (resultSet.next())
                    count = resultSet.getInt("n");
                else
                    count = -1;
            } finally {
                statement.close();
                connection.close();
            }

            return count;

        } catch (SQLException ex) {
            ex.printStackTrace();
        }
        return -1;
    }

    @Override
    public boolean isEmpty() {
        return size() == 0;
    }

    @Override
    public boolean containsKey(Object key) {
        try {

            Connection connection = DriverManager.getConnection(url,user,password);
            PreparedStatement statement = connection.prepareStatement(SELECT_LISTA);

            statement.setInt(1, (int) key);

            try (ResultSet result = statement.executeQuery()) {
                return result.next();
            } finally {
                statement.close();
                connection.close();
            }

        } catch (SQLException ex) {
            ex.printStackTrace();
        }
        return false;
    }

    @Override
    public boolean containsValue(Object value) {return containsKey(((Lista)value).getIdLista());}

    @Override
    public Lista get(Object key) {
        Lista lista = null;
        try {

            Connection connection = DriverManager.getConnection(url,user,password);
            PreparedStatement statement = connection.prepareStatement(SELECT_LISTA);

            statement.setInt(1,(int) key);

            try (ResultSet result = statement.executeQuery()) {
                if (result.next()) {
                    lista = new Lista(result.getString("nome_lista"));
                    lista.setIdLista((int) key);
                    lista.setResultado(result.getInt("resultado"));
                }
            } finally {
                statement.close();
                connection.close();
            }

        } catch (SQLException ex) {
            ex.printStackTrace();
        }
        return lista;
    }

    @Override
    public Lista put(Integer key, Lista value) {
        String query;
        int autoGeneratedKeys;
        boolean isUpdate;
        if(key<0){
            isUpdate=false;
            query = INSERT_LISTA;
            autoGeneratedKeys = Statement.RETURN_GENERATED_KEYS;
        }
        else{
            isUpdate=true;
            query = UPDATE_LISTA;
            autoGeneratedKeys = Statement.NO_GENERATED_KEYS;
        }

        try {
            Connection connection = DriverManager.getConnection(url,user,password);
            PreparedStatement statement = connection.prepareStatement(query,autoGeneratedKeys);

            statement.setString(1,value.getNome());
            statement.setInt(2,value.getResultado());

            if(isUpdate){
                statement.setInt(3,key);
            }

            statement.executeUpdate();

            try {
                if(autoGeneratedKeys == Statement.RETURN_GENERATED_KEYS){
                    ResultSet keys = statement.getGeneratedKeys();
                    if(keys != null && keys.next()){
                        value.setIdLista(keys.getInt(1));
                    }
                }
            }catch(SQLException e){
                e.printStackTrace();
            }finally {
                statement.close();
                connection.close();
            }
        }
        catch (SQLException ex){
            ex.printStackTrace();
        }
        return value;
    }

    @Override
    public Lista remove(Object key) {
        Lista lista = get(key);
        try {
            Connection connection = DriverManager.getConnection(url, user, password);
            PreparedStatement statement = connection.prepareStatement(DELETE_LISTA);

            statement.setInt(1, (int) key);
            try {
                statement.executeUpdate();
            } finally {
                statement.close();
                connection.close();
            }
        }catch (SQLException e){
            e.printStackTrace();
        }
        return lista;
    }

    @Override
    public void putAll(Map<? extends Integer, ? extends Lista> m) {
        for(Lista lista:m.values()){
            put(lista.getIdLista(),lista);
        }

    }

    @Override
    public void clear() {
        try{
            Connection connection = DriverManager.getConnection(url,user,password);

            try (Statement statement = connection.createStatement()){
                statement.executeUpdate(DELETE_LISTAS);
            }finally {
                connection.close();
            }
        }catch (SQLException e){
            e.printStackTrace();
        }

    }

    @Override
    public Set<Integer> keySet() {
        Set<Integer> s = new HashSet<>();

        try{

            Connection connection = DriverManager.getConnection(url,user,password);
            PreparedStatement statement = connection.prepareStatement(SELECT_IDS);

            try(ResultSet result = statement.executeQuery()){
                while (result.next()){
                    s.add(result.getInt(1));
                }
            }finally {
                connection.close();
                statement.close();
            }
        }
        catch(SQLException e){
            e.printStackTrace();
        }
        return s;
    }

    @Override
    public Collection<Lista> values() {
        ArrayList<Lista> arrayList = new ArrayList<>();
        try{
            Lista lista;

            Connection connection = DriverManager.getConnection(url,user,password);
            PreparedStatement statement = connection.prepareStatement(SELECT_LISTAS);

            try(ResultSet resultSet = statement.executeQuery()){
                while(resultSet.next()){
                    lista = new Lista(resultSet.getString("nome_lista"));
                    lista.setIdLista(resultSet.getInt("id_lista"));
                    lista.setResultado(resultSet.getInt("resultado"));

                    arrayList.add(lista);
                }
            }finally {
                connection.close();
                statement.close();
            }
        }
        catch (SQLException e){
            e.printStackTrace();
        }
        return arrayList;
    }

    @Override
    public Set<Entry<Integer, Lista>> entrySet() {
        return null;
    }

    public List<Lista> findListabyEleicao(Integer idEleicao){
        return null;
    }

    public Lista getByNome(Object key) {
        Lista lista = null;
        try {

            Connection connection = DriverManager.getConnection(url,user,password);
            PreparedStatement statement = connection.prepareStatement(SELECT_BY_NOME);

            statement.setString(1, (String) key);

            try (ResultSet result = statement.executeQuery()) {
                if (result.next()) {
                    lista = new Lista((String) key);
                    lista.setIdLista(result.getInt("id_lista"));
                    lista.setResultado(result.getInt("resultado"));
                }
            } finally {
                statement.close();
                connection.close();
            }

        } catch (SQLException ex) {
            ex.printStackTrace();
        }
        return lista;
    }
}